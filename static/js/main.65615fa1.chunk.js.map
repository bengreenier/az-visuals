{"version":3,"sources":["routes/traffic-manager/util.ts","Auth.tsx","../../src/graph.ts","types.ts","routes/traffic-manager/TrafficManager.tsx","routes/router-utils.ts","routes/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BooleanAttribute","EnabledAttribute","AuthWrapperContext","createContext","credentials","signRequest","Promise","reject","Error","logout","AuthWrapper","props","enabled","clientId","tenantId","redirectUri","logRedirectInfo","useState","isAuthenticated","setIsAuthenticated","setCredentials","authManager","useMemo","AuthManager","tenant","finalizeLogin","login","useEffect","qs","parseQuery","document","location","href","split","token","TokenCredentials","console","log","hash","then","res","isLoggedIn","creds","undefined","Provider","value","children","TM_PROFILE_TYPE","textLayout","textAnchor","x","dy","loadSubscriptions","cred","subFilter","a","client","SubscriptionClient","tenants","list","firstTenantId","subscriptions","subs","filter","s","test","displayName","subscriptionId","map","inflateProfileAsNeeded","profile","rgName","extractIdName","id","resourceGroup","endpoints","find","e","type","profiles","get","name","data","loadTrafficManagers","tmFilter","clients","TrafficManagerManagementClient","all","c","listBySubscription","p","inflatedList","profileLists","flat","walkerOpts","isIgnored","isNullOrUndefined","isParent","fields","getId","getType","strip","loadGraph","subscriptionFilter","trafficManagerFilter","tms","instance","graph","Walker","walkAndBuild","loadGraphExternal","url","parsedUrl","URL","filterSearch","encodeURIComponent","source","reqUrl","origin","pathname","search","length","fetch","json","parseMatcherParam","param","RegExp","toTree","topLevel","portalHostname","raw","getNodeData","attributes","selectAttributes","toSubTree","root","directDependantsOf","next","ApiType","buildPortalUrl","resourceId","isHealthyEndpoint","endpointStatus","Enabled","endpointMonitorStatus","isActiveAndEnabled","hasHealthyEndpoint","some","profileStatus","True","False","routingMethod","trafficRoutingMethod","monitorStatus","monitorConfig","profileMonitorStatus","activeAndEnabled","portalUrl","weight","geoMapping","join","priority","determinePathClass","link","_","target","matched","exec","TrafficManagerPage","useParams","subscription","trafficManager","key","defaultValue","localStorage","getItem","cache","setCache","setItem","useLocalStorage","showIndex","setShowIndex","subscriptionMatcher","trafficManagerMatcher","style","display","height","overflow","onReady","api","IndexPage","textAlign","listStyle","backgroundColor","borderRadius","color","onClick","TrafficManagerData","useContext","query","URLSearchParams","useLocation","history","useHistory","setGraph","graphRoots","setGraphRoots","activeRoot","setActiveRoot","getNewGraphRoot","useCallback","r","Azure","Custom","rootIds","overallOrder","desiredRoot","replace","tree","treeId","availableRoots","requestTree","newRoot","TrafficManagerView","selectOptions","setSelectOptions","t","label","flexDirection","flexGrow","border","borderBottomWidth","borderTopWidth","onChange","currentTarget","TrafficManagerTree","orientation","depthFactor","nodeSize","y","pathClassFunc","renderCustomNodeElement","TrafficManagerNode","nodeDatum","toggleNode","attrs","fill","className","window","open","Object","entries","i","labelKey","labelValue","trafficManagerRoute","subscriptionsRoute","AppRouter","manifest","setManifest","useRuntimeManifest","RouterTree","apiType","azure","exact","path","to","custom","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.65615fa1.chunk.js","sourcesContent":["import { ServiceClientCredentials } from \"@azure/ms-rest-js\";\nimport { SubscriptionClient } from \"@azure/arm-subscriptions\";\nimport { TrafficManagerManagementClient } from \"@azure/arm-trafficmanager\";\nimport { Subscription } from \"@azure/arm-subscriptions/esm/models\";\nimport { Endpoint, Profile } from \"@azure/arm-trafficmanager/esm/models\";\nimport { graph } from \"@az-visuals/hierarchy\";\nimport { DepGraph } from \"dependency-graph\";\nimport {\n  Orientation,\n  RawNodeDatum,\n  TreeLinkDatum,\n} from \"react-d3-tree/lib/types/common\";\n\n/**\n * The graph data type used throughout visual components\n */\nexport type GraphData = Endpoint & Profile & { tenantId: string };\n\n/**\n * Type of the traffic manager profile\n */\nexport const TM_PROFILE_TYPE = \"Microsoft.Network/trafficManagerProfiles\";\n\n/**\n * The default node circle radius for the custom node element\n */\nexport const DEFAULT_NODE_CIRCLE_RADIUS = 15;\n\n/**\n * The settings for the text rendering of the custom node element\n */\nexport const textLayout = {\n  title: {\n    textAnchor: \"start\",\n    x: 40,\n  },\n  attribute: {\n    x: 40,\n    dy: \"1.2em\",\n  },\n};\n\n/**\n * Augmented subscription type\n */\ntype SubscriptionWithTenantId = Subscription & { tenantId: string };\n\n/**\n * Loads azure subscriptions\n * @param cred credential to use\n * @param subFilter subscription filter - works on names or ids\n * @returns subscriptions\n */\nconst loadSubscriptions = async (\n  cred: ServiceClientCredentials,\n  subFilter: RegExp\n): Promise<SubscriptionWithTenantId[]> => {\n  const client = new SubscriptionClient(cred);\n\n  // for now, we use the first tenantId for all subs, since the API\n  // does not expose a sub<->tenant mapping\n  const tenants = await client.tenants.list();\n  const firstTenantId = tenants[0].tenantId as string;\n\n  const subs = await client.subscriptions.list();\n\n  return subs\n    .filter(\n      (s) =>\n        subFilter.test(s.displayName as string) ||\n        subFilter.test(s.subscriptionId as string)\n    )\n    .map((s) => ({ ...s, tenantId: firstTenantId }));\n};\n\n/**\n * Helper to inflate a traffic manager profile to include it's full dataset\n * @param client traffic manager client\n * @param profile profile to inflate\n * @returns inflated profile\n */\nconst inflateProfileAsNeeded = async (\n  client: TrafficManagerManagementClient,\n  profile: Profile\n) => {\n  const rgName = extractIdName(profile.id as string).resourceGroup;\n  if (\n    profile.endpoints &&\n    profile.endpoints.find((e) => e.type !== TM_PROFILE_TYPE)\n  ) {\n    const data = await client.profiles.get(rgName, profile.name as string);\n    return { ...data, rgName };\n  } else {\n    return { ...profile, rgName };\n  }\n};\n\n/**\n * Load traffic managers from subscriptions\n * @param cred credential to use\n * @param subs subscriptions to scan\n * @param tmFilter traffic manager name filter\n * @returns traffic managers\n */\nconst loadTrafficManagers = async (\n  cred: ServiceClientCredentials,\n  subs: SubscriptionWithTenantId[],\n  tmFilter: RegExp\n) => {\n  const clients = subs.map((s) => ({\n    client: new TrafficManagerManagementClient(\n      cred,\n      s.subscriptionId as string\n    ),\n    tenantId: s.tenantId,\n  }));\n\n  const profileLists = await Promise.all(\n    clients.map((c) =>\n      c.client.profiles.listBySubscription().then(async (list) => {\n        const inflatedList = await Promise.all(\n          list.map((p) => inflateProfileAsNeeded(c.client, p))\n        );\n        return inflatedList.map((p) => ({\n          ...p,\n          tenantId: c.tenantId,\n        }));\n      })\n    )\n  );\n  const profiles = profileLists.flat();\n\n  return profiles.filter((p) => tmFilter.test(p.name as string));\n};\n\n/**\n * Options for the graph walker to traverse TM data\n */\nconst walkerOpts: graph.WalkerOpts<GraphData> = {\n  /**\n   * Informs the graph walker if data should be ignored\n   * @param data profile/endpoint data\n   * @returns true if the data should be ignored\n   */\n  isIgnored: (data) =>\n    isNullOrUndefined(data) ||\n    !(\n      data.type === TM_PROFILE_TYPE ||\n      data.type ===\n        \"Microsoft.Network/trafficManagerProfiles/nestedEndpoints\" ||\n      data.type === \"Microsoft.Network/trafficManagerProfiles/azureEndpoints\" ||\n      data.type === \"Microsoft.Network/trafficManagerProfiles/externalEndpoints\"\n    ),\n  /**\n   * Informs the graph walker if data represents a root, or a leaf\n   * @param data profile/endpoint data\n   * @returns true if the data represents a \"parent\" type that may have children under it\n   */\n  isParent: (data) => {\n    return !isNullOrUndefined(data) && data.type === TM_PROFILE_TYPE;\n  },\n  /**\n   * Field info for the graph walker\n   */\n  fields: {\n    /**\n     * The data property to use as the node id\n     */\n    id: \"id\",\n    /**\n     * The data property to use as the node type\n     */\n    type: \"type\",\n    /**\n     * Utility method the walker will use to parse out the id from the data\n     * @param data profile/endpoint data\n     * @returns id\n     */\n    getId: (data) =>\n      ((data as Endpoint)[\"targetResourceId\"] as string) ??\n      (data[\"id\"] as string),\n\n    /**\n     * Utility method the walker will use to parse out the type from the data\n     * @param data profile/endpoint data\n     * @returns type\n     */\n    getType: (data) => data.type as string,\n\n    /**\n     * Utility method used to remove certain fields from the data\n     * @returns fields to strip\n     */\n    strip: () => [\"tags\"],\n  },\n};\n\n/**\n * Load graph using azure apis\n * @param creds credentials to use\n * @param subscriptionFilter subscription filter\n * @param trafficManagerFilter traffic manager filter\n * @returns graph\n */\nexport const loadGraph = async (\n  creds: ServiceClientCredentials,\n  subscriptionFilter: RegExp,\n  trafficManagerFilter: RegExp\n) => {\n  const subs = await loadSubscriptions(creds, subscriptionFilter);\n  const tms = await loadTrafficManagers(creds, subs, trafficManagerFilter);\n\n  const instance = new graph.Walker(walkerOpts);\n  return instance.walkAndBuild(tms);\n};\n\n/**\n * Load graph using external apis\n * @param url url to query\n * @param subscriptionFilter subscription filter\n * @param trafficManagerFilter traffic manager filter\n * @returns graph\n */\nexport const loadGraphExternal = async (\n  url: string,\n  subscriptionFilter: RegExp,\n  trafficManagerFilter: RegExp\n) => {\n  const parsedUrl = new URL(url);\n  const filterSearch = `subscriptionFilter=${encodeURIComponent(\n    subscriptionFilter.source\n  )}&trafficManagerFilter=${encodeURIComponent(trafficManagerFilter.source)}`;\n\n  let reqUrl = `${parsedUrl.origin}${parsedUrl.pathname}`;\n\n  if (parsedUrl.search && parsedUrl.search.length > 0) {\n    reqUrl += `${parsedUrl.search}&${filterSearch}`;\n  } else {\n    reqUrl += `?${filterSearch}`;\n  }\n\n  const res = await fetch(reqUrl);\n  const data = (await res.json()) as GraphData;\n\n  const instance = new graph.Walker(walkerOpts);\n  return instance.walkAndBuild(data);\n};\n\n/**\n * parse a string value as a matcher param and generate regexp\n * @param param string value\n * @returns regexp\n */\nexport const parseMatcherParam = (param: string) => {\n  if (param === \"all\") {\n    return /.+/;\n  } else {\n    return new RegExp(param);\n  }\n};\n\n/**\n * Serializes a dependency graph to a react-d3-tree dataset\n * @param graph dependency graph to serialize\n * @param topLevel name of root node to show\n * @param portalHostname the portal hostname to use\n * @returns react-d3-tree compatible tree data\n */\nexport const toTree = (\n  graph: DepGraph<GraphData>,\n  topLevel: string,\n  portalHostname: string\n): RawNodeDatum => {\n  const raw = graph.getNodeData(topLevel);\n  return {\n    name: raw.name as string,\n    attributes: selectAttributes(raw, portalHostname),\n    children: toSubTree(graph, topLevel, portalHostname),\n  };\n};\n\n/**\n * Serializes a dependency sub graph to a react-d3-tree sub dataset\n * Should not be called directly, used by @see toTree\n * @param graph dependency sub graph to serialize\n * @param root sub graph root name\n * @param portalHostname the portal hostname to use\n * @returns react-d3-tree compatible subtree data\n */\nconst toSubTree = (\n  graph: DepGraph<GraphData>,\n  root: string,\n  portalHostname: string\n): RawNodeDatum[] => {\n  return graph.directDependantsOf(root).map((next) => {\n    const raw = graph.getNodeData(next);\n\n    // fixup endpoint nodes to include tenantId from parent nodes\n    if (!raw.tenantId) {\n      raw.tenantId = graph.getNodeData(root).tenantId;\n    }\n\n    return {\n      name: raw.name as string,\n      attributes: selectAttributes(raw, portalHostname),\n      children: toSubTree(graph, next, portalHostname),\n    };\n  });\n};\n\n/**\n * Boolean string representation\n */\nexport enum BooleanAttribute {\n  True = \"true\",\n  False = \"false\",\n}\n\n/**\n * Enabled string representation\n */\nexport enum EnabledAttribute {\n  Unknown = \"\",\n  Enabled = \"Enabled\",\n  Disabled = \"Disabled\",\n}\n\n/**\n * Node data attributes type information\n */\nexport interface DataAttributes extends Record<string, string> {\n  type: string;\n  routingMethod: string;\n  monitorStatus: string;\n  enabled: EnabledAttribute;\n  activeAndEnabled: BooleanAttribute;\n  portalUrl: string;\n}\n\n/**\n * Build a portal url\n * @see https://github.com/Azure/portaldocs/blob/45b60564f5341da629081f3ff3aa306ff909e8ab/portal-sdk/generated/portalfx-links.md#resources\n * @param portalHostname the portal hostname to use\n * @param tenantId azure ad tenant id\n * @param resourceId azure resource id\n */\nconst buildPortalUrl = (\n  portalHostname: string,\n  tenantId: string,\n  resourceId: string\n) => {\n  return `https://${portalHostname}/#@{${tenantId}}/resource${resourceId}`;\n};\n\n/**\n * Determine if an endpoint is healthy given the data\n * @param data endpoint\n * @returns health status\n */\nconst isHealthyEndpoint = (data: Endpoint): boolean => {\n  return (\n    data.endpointStatus === EnabledAttribute.Enabled &&\n    data.endpointMonitorStatus !== \"Degraded\" &&\n    data.endpointMonitorStatus !== \"Disabled\" &&\n    data.endpointMonitorStatus !== \"Inactive\" &&\n    data.endpointMonitorStatus !== \"Stopped\"\n  );\n};\n\n/**\n * Determines if a profile/endpoint is active and enabled\n * @param data data to inspect\n */\nconst isActiveAndEnabled = (data: GraphData): BooleanAttribute => {\n  if (data.type === TM_PROFILE_TYPE) {\n    const hasHealthyEndpoint =\n      data.endpoints?.some((e) => isHealthyEndpoint(e)) ?? false;\n    return data.profileStatus === EnabledAttribute.Enabled && hasHealthyEndpoint\n      ? BooleanAttribute.True\n      : BooleanAttribute.False;\n  } else {\n    return data.endpointStatus === EnabledAttribute.Enabled &&\n      isHealthyEndpoint(data)\n      ? BooleanAttribute.True\n      : BooleanAttribute.False;\n  }\n};\n\n/**\n * Parse endpoint/profile data into pre-defined attributes object\n * @param data endpoint/profile data\n * @param portalHostname the portal hostname to use\n * @returns attribute records\n */\nexport const selectAttributes = (\n  data: GraphData,\n  portalHostname: string\n): DataAttributes => {\n  // select just the things we care about rendering\n  const res: DataAttributes = {\n    type: data.type || \"\",\n    routingMethod: data.trafficRoutingMethod || \"\",\n    monitorStatus:\n      data.monitorConfig?.profileMonitorStatus ||\n      data.endpointMonitorStatus ||\n      \"\",\n    enabled: (data.profileStatus ||\n      data.endpointStatus ||\n      \"\") as EnabledAttribute,\n    activeAndEnabled: isActiveAndEnabled(data),\n    portalUrl: buildPortalUrl(portalHostname, data.tenantId, data.id as string),\n  };\n\n  // augment with data for different routing types\n  if (typeof data.weight !== \"undefined\") {\n    res[\"weight\"] = `${data.weight}`;\n  }\n  if (typeof data.geoMapping !== \"undefined\") {\n    res[\"geographies\"] = data?.geoMapping?.join(\", \") ?? \"world\";\n  }\n  if (typeof data.priority !== \"undefined\") {\n    res[\"priority\"] = `${data.priority}`;\n  }\n\n  return res;\n};\n\n/**\n * Determine the class to use for the link\n * @param link the link\n * @param _ the link orientation\n */\nexport const determinePathClass = (link: TreeLinkDatum, _: Orientation) => {\n  const { target } = link;\n  const targetAttrs = target.data.attributes as DataAttributes;\n\n  return targetAttrs.activeAndEnabled === BooleanAttribute.True\n    ? \"active-link\"\n    : \"inactive-link\";\n};\n\n/**\n * Helper to determine if object is null or undefined\n * @param data any object\n * @returns true if null or undefined, otherwise false\n */\nexport const isNullOrUndefined = (data: unknown) =>\n  typeof data === \"undefined\" || data === null;\n\n/**\n * Helper to extract azure resource group and name\n * @param resourceId the azure resource id\n */\nexport const extractIdName = (resourceId: string) => {\n  const matched = /\\/resourceGroups\\/(.+?)\\/providers\\/Microsoft.Network\\/trafficManagerProfiles\\/(.+)\\/?/.exec(\n    resourceId\n  );\n  if (matched == null || matched.length < 2) {\n    throw new Error(`Invalid resourceId: '${resourceId}'`);\n  }\n\n  return { resourceGroup: matched[1], name: matched[2] };\n};\n","import {\n  createContext,\n  PropsWithChildren,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { ServiceClientCredentials, TokenCredentials } from \"@azure/ms-rest-js\";\nimport { AuthManager } from \"@azure/ms-rest-browserauth\";\nimport { parse as parseQuery } from \"querystring\";\n\n/**\n * Logout function type\n */\nexport type LogoutFunction = () => void;\n\n/**\n * Internal-only types for @see AuthWrapperContext\n */\ninterface ContextType {\n  credentials: ServiceClientCredentials;\n  logout: LogoutFunction;\n}\n\n/**\n * React context for accessing auth information\n * Only valid from within an @see AuthWrapper\n */\nexport const AuthWrapperContext = createContext<ContextType>({\n  credentials: {\n    signRequest: () => {\n      return Promise.reject(new Error(`Not Implemented`));\n    },\n  },\n  logout: () => {\n    throw new Error(`Not Implemented`);\n  },\n});\n\n/**\n * @see AuthWrapper component properties\n */\ninterface Props {\n  /**\n   * Flag indicating if auth is enabled\n   */\n  enabled: boolean;\n\n  /**\n   * The AAD client id to authenticate with\n   */\n  clientId: string;\n\n  /**\n   * The AAD redirectUri to call back to\n   * @example http://localhost:3000\n   */\n  redirectUri: string;\n\n  /**\n   * The (optional) AAD tenantId to force authentication to use\n   */\n  tenantId?: string;\n\n  /**\n   * Flag indicating if redirect state will be logged\n   * Useful for debugging\n   */\n  logRedirectInfo?: boolean;\n}\n\n/**\n * Internal-only type of the inbound request querstring that may already contain a token\n * If a token is present, it is used instead of AAD auth\n */\ninterface InboundQuerystring {\n  /**\n   * Optional token to use instead of AAD auth\n   */\n  token?: string;\n}\n\n/**\n * Auth component for wrapping children element inside an authenticated view\n * @param props properties\n * @returns React component\n */\nexport const AuthWrapper = (props: PropsWithChildren<Props>) => {\n  const { enabled, clientId, tenantId, redirectUri, logRedirectInfo } = props;\n\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(\n    enabled ? false : true\n  );\n  const [credentials, setCredentials] = useState<ServiceClientCredentials>();\n\n  // create the add auth manager\n  const authManager = useMemo(() => {\n    return enabled\n      ? new AuthManager({\n          clientId,\n          tenant: tenantId,\n          redirectUri,\n        })\n      : {\n          finalizeLogin: () => Promise.reject(new Error(`Not implemented`)),\n          login: () => {},\n          logout: () => {},\n        };\n  }, [enabled, clientId, tenantId, redirectUri]);\n\n  const logout = useMemo(() => {\n    return () => {\n      authManager.logout();\n    };\n  }, [authManager]);\n\n  useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    // parse out the querystring, checking for a token\n    const qs: InboundQuerystring = parseQuery(\n      document.location.href.split(\"?\")[1] || \"\"\n    );\n\n    // if we're using \"real\" auth\n    if (!qs || !qs.token) {\n      // we log the hash contents because in a login failure AAD may share info about the failure\n      // in there, and we'll want to be able to read it.\n      if (logRedirectInfo || true) {\n        console.log(`Login begin: ${document.location.hash}`);\n      }\n\n      // complete the auth dance\n      authManager.finalizeLogin().then((res) => {\n        if (!res.isLoggedIn) {\n          setIsAuthenticated(false);\n          setCredentials(undefined);\n          authManager.login();\n        } else {\n          setCredentials(res.creds);\n          setIsAuthenticated(true);\n        }\n      });\n    }\n    // if we're using token pass through\n    else {\n      // just setup the token and proceed, no auth dance needed\n      setCredentials(new TokenCredentials(qs.token));\n      setIsAuthenticated(true);\n    }\n  }, [enabled, authManager, logRedirectInfo]);\n\n  // render the component, including it's children within the wrapper context\n  return (\n    <>\n      {isAuthenticated ? (\n        <AuthWrapperContext.Provider value={{ credentials, logout }}>\n          {props.children}\n        </AuthWrapperContext.Provider>\n      ) : (\n        <h1>Redirecting for authentication...</h1>\n      )}\n    </>\n  );\n};\n","import { DepGraph } from \"dependency-graph\";\nimport debug from \"debug\";\n/**\n * logger instance for graph\n */\nconst log = debug(`az-visuals.hierarchy.graph`);\nconst beforeLog = debug(`az-visuals.hierarchy.graph.before`);\nexport class Walker {\n    constructor(options) {\n        this.options = options;\n        this.graph = new DepGraph();\n    }\n    walkAndBuild(data) {\n        if (Array.isArray(data)) {\n            data.forEach((d) => this.walkAndBuildInternal(d));\n        }\n        else {\n            this.walkAndBuildInternal(data);\n        }\n        return this.graph;\n    }\n    walkAndBuildInternal(data, parentData) {\n        // parent data is mutable, as a node update might need to change this status\n        let isParent = this.options.isParent(data);\n        let nextParentData = isParent ? data : parentData;\n        const ignore = this.options.isIgnored(data);\n        if (!ignore && typeof data !== \"undefined\") {\n            const type = this.options.fields.getType(data);\n            const id = this.options.fields.getId(data);\n            data[this.options.fields.type] = type;\n            data[this.options.fields.id] = id;\n            const writableData = { ...data };\n            this.options.fields.strip().forEach((stripField) => {\n                delete writableData[stripField];\n            });\n            if (this.graph.hasNode(id)) {\n                const oldNodeData = this.graph.getNodeData(id);\n                const newNodeData = { ...writableData, ...oldNodeData };\n                // update parent info\n                isParent = this.options.isParent(writableData);\n                nextParentData = isParent ? newNodeData : parentData;\n                beforeLog(`updating data for ${id}`);\n                this.graph.setNodeData(id, newNodeData);\n                log(`updated data for ${id}`);\n            }\n            else {\n                beforeLog(`adding node ${id}`);\n                this.graph.addNode(id, writableData);\n                log(`added node ${id}`);\n            }\n            if (!isParent) {\n                const parentId = this.options.fields.getId(parentData);\n                beforeLog(`${id} will depend on ${parentId}`);\n                this.graph.addDependency(id, parentId);\n                log(`${id} depends on ${parentId}`);\n            }\n        }\n        if (Array.isArray(data)) {\n            data.forEach((d) => this.walkAndBuildInternal(d, nextParentData));\n        }\n        else if (typeof data === \"object\") {\n            for (const key in data) {\n                const v = data[key];\n                this.walkAndBuildInternal(v, nextParentData);\n            }\n        }\n    }\n}\nexport const toTree = (graph, root) => {\n    if (!root) {\n        return graph.overallOrder(true).map((next) => {\n            return {\n                _data: graph.getNodeData(next),\n                children: toTree(graph, next),\n            };\n        });\n    }\n    else {\n        return graph.directDependantsOf(root).map((next) => {\n            return {\n                _data: graph.getNodeData(next),\n                children: toTree(graph, next),\n            };\n        });\n    }\n};\n//# sourceMappingURL=graph.js.map","/**\n * Types of APIs we support\n */\nexport enum ApiType {\n  /**\n   * This will directly query azure\n   */\n  Azure = \"azure\",\n\n  /**\n   * This will query a custom endpoint\n   */\n  Custom = \"custom\",\n}\n\n/**\n * Runtime manifest describes how the client app will behave at runtime\n * It is queried during client application startup\n */\nexport interface RuntimeManifest {\n  /**\n   * The api type to use\n   */\n  apiType: ApiType;\n\n  /**\n   * Properties for if apiType == custom\n   */\n  custom?: {\n    /**\n     * Url to query traffic managers from\n     */\n    url: string;\n  };\n\n  /**\n   * Properties for if apiType == azure\n   */\n  azure?: {\n    /**\n     * Client id for aad authentication\n     */\n    clientId: string;\n\n    /**\n     * Tenant id for aad authentication\n     */\n    tenantId: string;\n\n    /**\n     * Redirect uri to use for aad authentication\n     */\n    redirectUri: string;\n  };\n\n  /**\n   * Hostname property for building portal urls.\n   * Should not include protocol nor trailing slash.\n   */\n  portalHostname: string;\n}\n","import { DepGraph } from \"dependency-graph\";\nimport React, {\n  ChangeEvent,\n  PropsWithChildren,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { AuthWrapperContext } from \"../../Auth\";\nimport {\n  DEFAULT_NODE_CIRCLE_RADIUS,\n  loadGraph,\n  loadGraphExternal,\n  parseMatcherParam,\n  textLayout,\n  BooleanAttribute,\n  DataAttributes,\n  determinePathClass,\n  GraphData,\n  toTree,\n} from \"./util\";\nimport { useLocalStorage, useQuery } from \"../router-utils\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  CustomNodeElementProps,\n  RawNodeDatum,\n} from \"react-d3-tree/lib/types/common\";\nimport Tree from \"react-d3-tree\";\nimport \"./TrafficManager.css\";\nimport { ApiType, RuntimeManifest } from \"../../types\";\n\n/**\n * Route parameter name for subscription property\n */\nexport const subscriptionParam = \"subscription\";\n\n/**\n * Route parameter name for  traffic manager property\n */\nexport const trafficManagerParam = \"trafficManager\";\n\n/**\n * Properties for the traffic manager data component\n */\ninterface TrafficManagerDataProps {\n  /**\n   * The api type to use\n   */\n  type: ApiType;\n\n  /**\n   * Optional url, used when type == ApiType.Custom @see ApiType\n   */\n  url?: string;\n\n  /**\n   * portal hostname format to use\n   */\n  portalHostname: RuntimeManifest[\"portalHostname\"];\n\n  /**\n   * A subscription filter value to limit subscriptions\n   */\n  subscriptionFilter: RegExp;\n\n  /**\n   * A traffic manager filter value to limit traffic managers\n   */\n  trafficManagerFilter: RegExp;\n}\n\n/**\n * Properties for the top-level page component\n */\nexport interface TrafficManagerPageProps {\n  /**\n   * Information about the api to use\n   */\n  api: Pick<TrafficManagerDataProps, \"type\"> &\n    Pick<TrafficManagerDataProps, \"url\">;\n\n  /**\n   * portal hostname format to use\n   */\n  portalHostname: RuntimeManifest[\"portalHostname\"];\n}\n\n/**\n * Parameters loaded from the url route\n */\ninterface PageParams {\n  /**\n   * subscription filter value\n   */\n  subscription: string;\n\n  /**\n   * traffic manager filter value\n   */\n  trafficManager: string;\n}\n\n/**\n * Top-level page component for traffic manager visualization\n * @param props properties\n * @returns react component\n */\nexport const TrafficManagerPage = (props: TrafficManagerPageProps) => {\n  const { subscription, trafficManager } = useParams<PageParams>();\n  const [showIndex, setShowIndex] = useLocalStorage(\n    \"az-visuals.tm.landing-page\",\n    \"true\"\n  );\n  const subscriptionMatcher = parseMatcherParam(subscription);\n  const trafficManagerMatcher = parseMatcherParam(trafficManager);\n\n  // render a full page div wil the data element\n  return (\n    <div style={{ display: \"flex\", height: \"100vh\", overflow: \"hidden\" }}>\n      {showIndex === \"true\" ? (\n        <IndexPage onReady={() => setShowIndex(\"false\")} />\n      ) : (\n        <TrafficManagerData\n          portalHostname={props.portalHostname}\n          subscriptionFilter={subscriptionMatcher}\n          trafficManagerFilter={trafficManagerMatcher}\n          {...props.api}\n        />\n      )}\n    </div>\n  );\n};\n\n/**\n * Index page component to display prior to authentication.\n * @param props properties\n * @returns React component\n */\nexport const IndexPage = (\n  props: PropsWithChildren<{ onReady: () => void }>\n) => {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1>Traffic Manager Visualizer</h1>\n      <h2>A tool to inspect complex traffic manager hierarchies</h2>\n      <h4>Options:</h4>\n      <ul style={{ listStyle: \"none\" }}>\n        <li>\n          <p>\n            Limit subscriptions with{\" \"}\n            <span\n              style={{\n                backgroundColor: \"rgba(27,31,35,0.05)\",\n                borderRadius: \"6px\",\n                color: \"#2C7BB6\",\n              }}\n            >\n              /subscriptions/&lt;subscriptionRegex&gt;/\n            </span>{\" \"}\n          </p>\n        </li>\n        <li>\n          <p>\n            Limit traffic managers with{\" \"}\n            <span\n              style={{\n                backgroundColor: \"rgba(27,31,35,0.05)\",\n                borderRadius: \"6px\",\n                color: \"#D7191C\",\n              }}\n            >\n              /traffic-managers/&lt;trafficManagerRegex&gt;/\n            </span>{\" \"}\n          </p>\n        </li>\n        <li>\n          <p>\n            Visualize a specific hierarchy root with{\" \"}\n            <span\n              style={{\n                backgroundColor: \"rgba(27,31,35,0.05)\",\n                borderRadius: \"6px\",\n                color: \"#8C52FC\",\n              }}\n            >\n              /?root=/full/path/to/root/tm\n            </span>{\" \"}\n          </p>\n        </li>\n        <li>\n          <p>\n            For example:\n            <br />\n            <span\n              style={{\n                backgroundColor: \"rgba(27,31,35,0.05)\",\n                borderRadius: \"6px\",\n              }}\n            >\n              /#/subscriptions/\n              <span style={{ color: \"#2C7BB6\" }}>\n                94738bcd-b366-4610-8e4e-004d8fab4161\n              </span>\n              /traffic-managers/<span style={{ color: \"#D7191C\" }}>all</span>\n              ?root=\n              <span style={{ color: \"#8C52FC\" }}>\n                /subscriptions/94738bcd-b366-4610-8e4e-004d8fab4161/resourceGroups/tntviz-test/providers/Microsoft.Network/trafficManagerProfiles/prd-toplevel\n              </span>\n            </span>{\" \"}\n          </p>\n        </li>\n        <li>\n          <p>\n            ... or append{\" \"}\n            <span\n              style={{\n                backgroundColor: \"rgba(27,31,35,0.05)\",\n                borderRadius: \"6px\",\n              }}\n            >\n              ?token=&lt;yourToken&gt;\n            </span>{\" \"}\n            to the url, to use a custom token for authentication - and refresh\n            the page.\n          </p>\n        </li>\n      </ul>\n      <button onClick={props.onReady}>Begin</button>\n    </div>\n  );\n};\n\n/**\n * Data management component including querying and filtering of data\n * @param props properties\n * @returns react component\n */\nconst TrafficManagerData = (props: TrafficManagerDataProps) => {\n  const {\n    type,\n    url,\n    subscriptionFilter,\n    trafficManagerFilter,\n    portalHostname,\n  } = props;\n  const ctx = useContext(AuthWrapperContext);\n  const { credentials } = ctx;\n  const query = useQuery();\n  const history = useHistory();\n  const [graph, setGraph] = useState<DepGraph<GraphData>>();\n  const [graphRoots, setGraphRoots] = useState<string[]>([]);\n\n  const [activeRoot, setActiveRoot] = useState<string>();\n\n  const root = query.get(\"root\") ?? \"first\";\n\n  // helper to find the best graph root\n  const getNewGraphRoot = useCallback(() => {\n    return () => {\n      return graphRoots.find((r) => r === root) ?? graphRoots[0];\n    };\n  }, [root, graphRoots]);\n\n  // load the data\n  useEffect(() => {\n    if (type === ApiType.Azure) {\n      loadGraph(credentials, subscriptionFilter, trafficManagerFilter).then(\n        (data) => {\n          setGraph(data);\n        }\n      );\n    } else if (type === ApiType.Custom) {\n      loadGraphExternal(url, subscriptionFilter, trafficManagerFilter).then(\n        (data) => {\n          setGraph(data);\n        }\n      );\n    }\n  }, [type, url, credentials, subscriptionFilter, trafficManagerFilter]);\n\n  // when the grap is populated, pull out the roots\n  useEffect(() => {\n    if (graph) {\n      const rootIds = graph.overallOrder(true);\n      setGraphRoots(rootIds);\n    }\n  }, [graph]);\n\n  // when the roots are populated, set the active root\n  useEffect(() => {\n    if (graphRoots.length > 0) {\n      const desiredRoot = getNewGraphRoot();\n\n      setActiveRoot(desiredRoot);\n    }\n  }, [graphRoots, root, getNewGraphRoot]);\n\n  // when the active root is set, update the url\n  useEffect(() => {\n    if (activeRoot) {\n      history.replace({\n        ...history.location,\n        search: `?root=${activeRoot}`,\n      });\n    }\n  }, [activeRoot, history]);\n\n  // render the children views with this data\n  return (\n    <>\n      {activeRoot ? (\n        <TrafficManagerView\n          tree={toTree(graph, activeRoot, portalHostname)}\n          treeId={activeRoot}\n          availableRoots={graphRoots}\n          requestTree={(newRoot: string) => {\n            setActiveRoot(newRoot);\n          }}\n        />\n      ) : (\n        <h1>Loading...</h1>\n      )}\n    </>\n  );\n};\n\n/**\n * Properties for the @see TrafficManagerView\n */\ninterface TrafficManagerViewProps {\n  /**\n   * The tree to render\n   */\n  tree: RawNodeDatum;\n\n  /**\n   * The tree root id to render\n   */\n  treeId: string;\n\n  /**\n   * Set of available tree roots\n   */\n  availableRoots: string[];\n\n  /**\n   * request that a different tree root be rendered\n   */\n  requestTree: (tree: string) => void;\n}\n\n/**\n * Interface to define a select dropdown option.\n */\ninterface selectOption {\n  /**\n   * The label value\n   */\n  label: string;\n\n  /**\n   * The value value\n   */\n  value: string;\n}\n\n/**\n * View component including root selection mechanisms\n * @param props properties\n * @returns react component\n */\nconst TrafficManagerView = (props: TrafficManagerViewProps) => {\n  const { tree, treeId, availableRoots, requestTree } = props;\n  const [selectOptions, setSelectOptions] = useState<selectOption[]>([]);\n\n  // render a selector of all available roots\n  useEffect(() => {\n    setSelectOptions(availableRoots.map((t) => ({ label: t, value: t })));\n  }, [availableRoots]);\n\n  // handler for selection change\n  const onSelectChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    requestTree(e.currentTarget.value);\n  };\n\n  // render the selector and tree inside a flexbox\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        flexGrow: 1,\n        height: \"100vh\",\n        border: \"2px solid #777\",\n        borderBottomWidth: \"0px\",\n        borderTopWidth: \"0px\",\n      }}\n    >\n      <select value={treeId} onChange={onSelectChange}>\n        {selectOptions.map(({ label, value }) => (\n          <option key={value} value={value}>\n            {label}\n          </option>\n        ))}\n      </select>\n      {tree && <TrafficManagerTree tree={tree} />}\n    </div>\n  );\n};\n\n/**\n * Tree renderer component\n * @param props properties\n * @returns react component\n */\nconst TrafficManagerTree = (props: Pick<TrafficManagerViewProps, \"tree\">) => {\n  // render the tree, using our custom node element\n  return (\n    <Tree\n      data={props.tree}\n      orientation={\"vertical\"}\n      depthFactor={500}\n      nodeSize={{ x: 400, y: 400 }}\n      pathClassFunc={determinePathClass}\n      renderCustomNodeElement={(props) => <TrafficManagerNode {...props} />}\n    />\n  );\n};\n\n/**\n * Custom tree node component\n * @param props properties\n * @returns react component\n */\nconst TrafficManagerNode: React.FunctionComponent<CustomNodeElementProps> = ({\n  nodeDatum,\n  toggleNode,\n}) => {\n  // pull out non-visual information\n  const {\n    activeAndEnabled,\n    portalUrl,\n    ...attrs\n  } = nodeDatum.attributes as DataAttributes;\n\n  // render the node, using non-visuals to control color, links\n  return (\n    <>\n      <circle\n        fill={\n          activeAndEnabled === BooleanAttribute.True ? \"#2C7BB6\" : \"#D7191C\"\n        }\n        r={DEFAULT_NODE_CIRCLE_RADIUS}\n        onClick={() => {\n          toggleNode();\n        }}\n      ></circle>\n      <g className=\"rd3t-label\">\n        <text\n          className=\"rd3t-label__title\"\n          {...textLayout.title}\n          onClick={() => {\n            window.open(portalUrl, \"_blank\");\n          }}\n        >\n          {nodeDatum.name}\n        </text>\n        <text className=\"rd3t-label__attributes\">\n          {attrs &&\n            Object.entries(attrs).map(([labelKey, labelValue], i) => (\n              <tspan key={`${labelKey}-${i}`} {...textLayout.attribute}>\n                {labelKey}: {labelValue}\n              </tspan>\n            ))}\n        </text>\n      </g>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { RuntimeManifest } from \"../types\";\n\nexport const useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\nexport const useLocalStorage = (\n  key: string,\n  defaultValue: string = \"\"\n): [string, (value: string) => void] => {\n  const [cache, setCache] = useState<string>(\n    localStorage.getItem(key) ?? defaultValue\n  );\n  return [\n    cache,\n    (value: string) => {\n      localStorage.setItem(key, value);\n      setCache(value);\n    },\n  ];\n};\n\nexport const useRuntimeManifest = () => {\n  const [manifest, setManifest] = useState<RuntimeManifest>();\n\n  useEffect(() => {\n    fetch(\"/runtime-manifest.json\").then(async (res) => {\n      const data = (await res.json()) as RuntimeManifest;\n      setManifest(data);\n    });\n  }, []);\n\n  return manifest;\n};\n","import React from \"react\";\nimport { HashRouter, Link, Route, Switch } from \"react-router-dom\";\nimport {\n  subscriptionParam,\n  TrafficManagerPage,\n  trafficManagerParam,\n} from \"./traffic-manager/TrafficManager\";\nimport { AuthWrapper } from \"../Auth\";\nimport { useRuntimeManifest } from \"./router-utils\";\nimport { ApiType, RuntimeManifest } from \"../types\";\n\nconst trafficManagerRoute = \"traffic-managers\";\nconst subscriptionsRoute = \"subscriptions\";\n\nexport default function AppRouter() {\n  const manifest = useRuntimeManifest();\n\n  return manifest ? (\n    <RouterTree manifest={manifest} />\n  ) : (\n    <h1>Loading runtime</h1>\n  );\n}\n\nconst RouterTree = (props: { manifest: RuntimeManifest }) => {\n  const { manifest } = props;\n  return (\n    <AuthWrapper\n      enabled={manifest.apiType === ApiType.Azure}\n      clientId={manifest.azure?.clientId ?? \"\"}\n      redirectUri={manifest.azure?.redirectUri ?? \"\"}\n      tenantId={manifest.azure?.tenantId ?? \"common\"}\n    >\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <div>\n              <h1>\n                Az-Visuals{\" \"}\n                <small>\n                  A collection of web-based tools for visualizing Azure\n                  resources. ☁🔎🎁\n                </small>\n              </h1>\n              <h3>Available Tools:</h3>\n              <ul>\n                <li>\n                  <Link\n                    to={`/${subscriptionsRoute}/all/${trafficManagerRoute}/all`}\n                  >\n                    Traffic Managers\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </Route>\n          <Route\n            path={`/${subscriptionsRoute}/:${subscriptionParam}/${trafficManagerRoute}/:${trafficManagerParam}`}\n          >\n            <TrafficManagerPage\n              api={{\n                type: manifest.apiType as ApiType,\n                url: manifest.custom?.url ?? \"\",\n              }}\n              portalHostname={manifest.portalHostname}\n            />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </AuthWrapper>\n  );\n};\n","import React from \"react\";\nimport AppRouter from \"./routes\";\nimport \"./App.css\";\n/**\n * Default react App component - React \"Entrypoint\"\n * @returns React component\n */\nfunction App() {\n  return <AppRouter />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}